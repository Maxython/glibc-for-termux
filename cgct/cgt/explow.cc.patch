--- src/gcc/gcc/explow.cc	2024-08-01 11:17:14.000000000 +0300
+++ src/gcc/gcc/explow.cc	2024-11-24 17:01:21.000000000 +0300
@@ -745,6 +745,53 @@
   return temp;
 }
 
+/* Like simplify_gen_subreg, but force OP into a new register if the
+   subreg cannot be formed directly.  */
+
+rtx
+force_subreg (machine_mode outermode, rtx op,
+	      machine_mode innermode, poly_uint64 byte)
+{
+  rtx x = simplify_gen_subreg (outermode, op, innermode, byte);
+  if (x)
+    return x;
+
+  auto *start = get_last_insn ();
+  op = copy_to_mode_reg (innermode, op);
+  rtx res = simplify_gen_subreg (outermode, op, innermode, byte);
+  if (!res)
+    delete_insns_since (start);
+  return res;
+}
+
+/* Try to return an rvalue expression for the OUTERMODE lowpart of OP,
+   which has mode INNERMODE.  Allow OP to be forced into a new register
+   if necessary.
+
+   Return null on failure.  */
+
+rtx
+force_lowpart_subreg (machine_mode outermode, rtx op,
+		      machine_mode innermode)
+{
+  auto byte = subreg_lowpart_offset (outermode, innermode);
+  return force_subreg (outermode, op, innermode, byte);
+}
+
+/* Try to return an rvalue expression for the OUTERMODE highpart of OP,
+   which has mode INNERMODE.  Allow OP to be forced into a new register
+   if necessary.
+
+   Return null on failure.  */
+
+rtx
+force_highpart_subreg (machine_mode outermode, rtx op,
+		       machine_mode innermode)
+{
+  auto byte = subreg_highpart_offset (outermode, innermode);
+  return force_subreg (outermode, op, innermode, byte);
+}
+
 /* If X is a memory ref, copy its contents to a new temp reg and return
    that reg.  Otherwise, return X.  */
 
@@ -1116,7 +1163,7 @@
      STACK_POINTER. This renders the HARD_FRAME_POINTER unusable for accessing
      aligned variables, which is reflected in ix86_can_eliminate.
      We normally still have the realigned STACK_POINTER that we can use.
-     But if there is a stack restore still present at reload, it can trigger 
+     But if there is a stack restore still present at reload, it can trigger
      mark_not_eliminable for the STACK_POINTER, leaving no way to eliminate
      FRAME_POINTER into a hard reg.
      To prevent this situation, we force need_drap if we emit a stack
@@ -1190,7 +1237,7 @@
   /* Record the new stack level for nonlocal gotos.  */
   if (cfun->nonlocal_goto_save_area)
     update_nonlocal_goto_save_area ();
- 
+
   /* Record the new stack level for SJLJ exceptions.  */
   if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ)
     update_sjlj_context ();
