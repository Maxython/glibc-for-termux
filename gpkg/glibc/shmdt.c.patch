--- glibc-2.38/sysdeps/unix/sysv/linux/shmdt.c	2023-02-01 06:27:45.000000000 +0300
+++ glibc-2.38/sysdeps/unix/sysv/linux/shmdt.c.patch	2023-06-08 12:48:00.059174203 +0300
@@ -18,16 +18,35 @@
 #include <ipc_priv.h>
 #include <sysdep.h>
 #include <errno.h>
+#include <shmem-android.h>
+#include <sys/mman.h>
 
 /* Detach shared memory segment starting at address specified by SHMADDR
    from the caller's data segment.  */
 
-int
-shmdt (const void *shmaddr)
+int shmdt(void const* shmaddr)
 {
-#ifdef __ASSUME_DIRECT_SYSVIPC_SYSCALLS
-  return INLINE_SYSCALL_CALL (shmdt, shmaddr);
-#else
-  return INLINE_SYSCALL_CALL (ipc, IPCOP_shmdt, 0, 0, 0, shmaddr);
-#endif
+	ashv_check_pid();
+
+	pthread_mutex_lock(&mutex);
+	for (size_t i = 0; i < shmem_amount; i++) {
+		if (shmem[i].addr == shmaddr) {
+			if (munmap(shmem[i].addr, shmem[i].size) != 0) {
+				DBG("%s: munmap %p failed\n", __PRETTY_FUNCTION__, shmaddr);
+			}
+			shmem[i].addr = NULL;
+			DBG("%s: unmapped addr %p for FD %d ID %zu shmid %x\n", __PRETTY_FUNCTION__, shmaddr, shmem[i].descriptor, i, shmem[i].id);
+			if (shmem[i].markedForDeletion || ashv_socket_id_from_shmid(shmem[i].id) != ashv_local_socket_id) {
+				DBG ("%s: deleting shmid %x\n", __PRETTY_FUNCTION__, shmem[i].id);
+				android_shmem_delete(i);
+			}
+			pthread_mutex_unlock(&mutex);
+			return 0;
+		}
+	}
+	pthread_mutex_unlock(&mutex);
+
+	DBG("%s: invalid address %p\n", __PRETTY_FUNCTION__, shmaddr);
+	/* Could be a remove segment, do not report an error for that. */
+	return 0;
 }
