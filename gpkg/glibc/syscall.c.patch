--- glibc-2.38/sysdeps/unix/sysv/linux/syscall.c	2023-07-31 20:54:16.000000000 +0300
+++ glibc-2.38/sysdeps/unix/sysv/linux/syscall.c.patch	2024-01-01 13:12:45.120508427 +0300
@@ -18,26 +18,26 @@
 
 #include <stdarg.h>
 #include <sysdep.h>
+#include <ignore-syscall.h>
 
 long int
 syscall (long int number, ...)
 {
+  for (int i=0; i<count_ignore_syscall; ++i)
+    if (ListIgnoreSyscall[i].id == number)
+      return 0;
+
   va_list args;
 
   va_start (args, number);
-  long int a0 = va_arg (args, long int);
-  long int a1 = va_arg (args, long int);
-  long int a2 = va_arg (args, long int);
-  long int a3 = va_arg (args, long int);
-  long int a4 = va_arg (args, long int);
-  long int a5 = va_arg (args, long int);
+  long int res = syscallS (number,
+    va_arg (args, long int),
+    va_arg (args, long int),
+    va_arg (args, long int),
+    va_arg (args, long int),
+    va_arg (args, long int),
+    va_arg (args, long int));
   va_end (args);
 
-  long int r = INTERNAL_SYSCALL_NCS_CALL (number, a0, a1, a2, a3, a4, a5);
-  if (__glibc_unlikely (INTERNAL_SYSCALL_ERROR_P (r)))
-    {
-      __set_errno (-r);
-      return -1;
-    }
-  return r;
+  return res;
 }
