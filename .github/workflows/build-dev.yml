name: build-dev

on:
  push:
    branches:
    - main
    paths:
    - 'gpkg-dev/**'
  pull_request:
    paths:
    - 'gpkg-dev/**'

jobs:
  build-1:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_arch: [aarch64, arm, x86_64, i686]
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: 'arm64,arm'
    - name: Get list gpkg-dev packages
      run: |
        mkdir -p "pkgs"
        if [ ${{ github.event_name }} = "pull_request" ]; then
          list=$(curl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -s -X GET -G \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | jq -r '.[] | .filename')
        else
          list=$(curl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -s -X GET -G \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}" | jq -r ".files[].filename")
        fi
        for i in $list; do
          il=(${i//// })
          if [[ "${il[0]}" = "gpkg-dev" && -d "${il[0]}/${il[1]}" ]]; then
            echo "${il[1]}" >> "pkgs/gpkg-dev-need.txt"
          fi
        done
    - name: Build gpkg-dev packages
      run: |
        for i in $(cat "pkgs/gpkg-dev-need.txt"); do
          ./script/docker.sh ${{ matrix.target_arch }} /home/user-build/script/build-dev.sh ${i}
          if [ -f "pkgs/gpkg-dev-continue.txt" ]; then
            break
          fi
        done
        tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
    - uses: actions/upload-artifact@v3
      with:
        name: build-1-gpkg-dev-${{ matrix.target_arch }}
        path: "./gpkg-dev-${{ matrix.target_arch }}.tar.xz"
        if-no-files-found: error
  build-2:
    runs-on: ubuntu-latest
    needs: build-1
    strategy:
      matrix:
        target_arch: [aarch64, arm, x86_64, i686]
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: 'arm64,arm'
    - name: Get gpkg-dev packages
      uses: actions/download-artifact@v3
      with:
        name: build-1-gpkg-dev-${{ matrix.target_arch }}
    - name: Build gpkg-dev packages
      run: |
        ls
        tar xJf gpkg-dev-${{ matrix.target_arch }}.tar.xz
        for i in $(cat pkgs/gpkg-dev-need.txt); do
          if [ -f pkgs/gpkg-dev-done.txt ] && $(grep -q " $i " pkgs/gpkg-dev-done.txt); then
            continue
          fi
          if [ -f pkgs/gpkg-dev-continue.txt && "$(cat pkgs/gpkg-dev-continue.txt)" = "$i" ]; then
            mv pkgs/src gpkg-dev/${i}
            rm pkgs/gpkg-dev-continue.txt
          fi
          ./script/docker.sh ${{ matrix.target_arch }} /home/user-build/script/build-dev.sh ${i}
          if [ -f "pkgs/gpkg-dev-continue.txt" ]; then
            break
          fi
        done
        rm gpkg-dev-${{ matrix.target_arch }}.tar.xz
        tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
    - uses: actions/upload-artifact@v3
      with:
        name: build-2-gpkg-dev-${{ matrix.target_arch }}
        path: "./gpkg-dev-${{ matrix.target_arch }}.tar.xz"
        if-no-files-found: error
  build-3:
    runs-on: ubuntu-latest
    needs: build-2
    strategy:
      matrix:
        target_arch: [aarch64, arm, x86_64, i686]
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: 'arm64,arm'
    - name: Get gpkg-dev packages
      uses: actions/download-artifact@v3
      with:
        name: build-2-gpkg-dev-${{ matrix.target_arch }}
    - name: Build gpkg-dev packages
      run: |
        tar xJf gpkg-dev-${{ matrix.target_arch }}.tar.xz
        for i in $(cat pkgs/gpkg-dev-need.txt); do
          if [ -f pkgs/gpkg-dev-done.txt ] && $(grep -q " $i " pkgs/gpkg-dev-done.txt); then
            continue
          fi
          if [ -f pkgs/gpkg-dev-continue.txt && "$(cat pkgs/gpkg-dev-continue.txt)" = "$i" ]; then
            mv pkgs/src gpkg-dev/${i}
            rm pkgs/gpkg-dev-continue.txt
          fi
          ./script/docker.sh ${{ matrix.target_arch }} /home/user-build/script/build-dev.sh ${i}
          if [ -f "pkgs/gpkg-dev-continue.txt" ]; then
            echo "Package $(cat pkgs/gpkg-dev-continue.txt) wasn't build"
            exit 1
          fi
        done
        rm gpkg-dev-${{ matrix.target_arch }}.tar.xz
        tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
    - uses: actions/upload-artifact@v3
      with:
        name: gpkg-dev-${{ matrix.target_arch }}
        path: "./gpkg-dev-${{ matrix.target_arch }}.tar.xz"
        if-no-files-found: error
  upload:
    if: github.event_name != 'pull_request'
    needs: build-3
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Get packages
      uses: actions/download-artifact@v3
      with:
        path: ./
    - name: Install aws-cli
      run: |
        git clone https://github.com/termux-pacman/aws-cli-action.git
        ./aws-cli-action/setup.sh '${{ secrets.AWS_ACCESS_KEY_ID }}' '${{ secrets.AWS_ACCESS_KEY }}' '${{ secrets.AWS_REGION }}'
    - name: Import GPG key
      run: |
        echo '${{ secrets.SF_GPG_BOT }}' > key.gpg
        gpg --pinentry-mode=loopback --passphrase '${{ secrets.PW_GPG_BOT }}' --import key.gpg > /dev/null
        rm key.gpg
    - name: Uploading packages to aws
      run: |
        #source ./aws-cli-action/func.sh
        for path_to_archive in gpkg-dev-*/gpkg-dev-{aarch64,arm,x86_64,i686}.tar.xz; do
          archive="${path_to_archive##*/}"
          arch=$(echo ${archive##*-} | sed 's/.tar.xz//')
          tar xJf "$path_to_archive"
          for pkg in pkgs/*.pkg.*; do
            gpg --batch --pinentry-mode=loopback --passphrase '${{ secrets.PW_GPG_BOT }}' --detach-sign --use-agent -u '${{ secrets.KEY_GPG_BOT }}' --no-armor "$pkg"
            for format_file in "" ".sig"; do
              aws s3 cp "${pkg}${format_file}" s3://'${{ secrets.SFPU }}'/gpkg-dev/$arch/"${pkg##*/}${format_file}"
            done
          done
          rm -fr pkgs
        done
