name: build-dev

on:
  push:
    branches:
    - main
    paths:
    - 'gpkg-dev/**'
  pull_request:
    paths:
    - 'gpkg-dev/**'

jobs:
  build-1:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_arch: [aarch64, armv7]
    name: build
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: build
        with:
          arch: ${{ matrix.target_arch }}
          distro: archarm_latest
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/builder"
            if [ ${{ github.event_name }} = "pull_request" ]; then
              url_api="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
              list=$(curl -s -X GET -G $url_api | jq -r '.[] | .filename')
            else
              list=$(git show --pretty="" --name-only ${{ github.sha }})
            fi
            for i in $list; do
              il=(${i//// })
              if [[ "${il[0]}" = "gpkg-dev" && -d "${il[0]}/${il[1]}" ]]; then
                echo "${il[1]}" >> "${PWD}/builder/gpkg-dev-need.txt"
              fi
            done
          dockerRunArgs: |
            --volume "${PWD}/builder:/builder" --volume "${PWD}/gpkg-dev:/root/gpkg-dev"
          install: |
            pacman -Syu --noconfirm
            pacman -S base-devel python git cmake python-setuptools ruby-ronn publicsuffix-list gtk-doc autoconf-archive gtest rsync ninja openssl meson --noconfirm --needed
          run: |
            useradd -m user-build
            mkdir -p /data/data/com.termux/files/usr/glibc
            ln -s /lib /data/data/com.termux/files/usr/glibc/lib
            ln -s /usr/share /data/data/com.termux/files/usr/glibc/share
            chown -R user-build:user-build gpkg-dev
            cd gpkg-dev
            mkdir /root/pkgs
            for i in $(cat /builder/gpkg-dev-need.txt); do
              cd "${i}"
              sudo -H -u user-build bash -c '(timeout --preserve-status 300m makepkg --noarchive && ([ "$?" = "0" ] && makepkg -R)) || ([ "$?" = "143" ] && true)'
              if $(ls *.pkg.* &> /dev/null); then
                mv *.pkg.* /root/pkgs
                echo " ${i} " >> /root/pkgs/gpkg-dev-done.txt
                cd ..
              else
                mv src /root/pkgs
                echo "${i}" > /root/pkgs/gpkg-dev-continue.txt
                break
              fi
            done
            cd /root
            mv /builder/gpkg-dev-need.txt pkgs
            tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
            mv gpkg-dev-${{ matrix.target_arch }}.tar.xz /builder
      - uses: actions/upload-artifact@v3
        with:
          name: build-1-gpkg-dev-${{ matrix.target_arch }}
          path: "./builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz"
          if-no-files-found: error
  build-2:
    runs-on: ubuntu-latest
    needs: build-1
    strategy:
      matrix:
        target_arch: [aarch64, armv7]
    name: build
    steps:
      - uses: actions/checkout@v3
      - name: Create dir builder
        run: |
          mkdir -p ./builder
      - name: Get packages
        uses: actions/download-artifact@v3
        with:
          name: build-1-gpkg-dev-${{ matrix.target_arch }}
          path: ./builder
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: build
        with:
          arch: ${{ matrix.target_arch }}
          distro: archarm_latest
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}/builder:/builder" --volume "${PWD}/gpkg-dev:/root/gpkg-dev"
          install: |
            pacman -Syu --noconfirm
            pacman -S base-devel python git cmake python-setuptools ruby-ronn publicsuffix-list gtk-doc autoconf-archive gtest rsync ninja openssl meson --noconfirm --needed
          run: |
            useradd -m user-build
            mkdir -p /data/data/com.termux/files/usr/glibc
            ln -s /lib /data/data/com.termux/files/usr/glibc/lib
            ln -s /usr/share /data/data/com.termux/files/usr/glibc/share
            tar xJf /builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz -C /root
            cd gpkg-dev
            for i in $(cat /root/pkgs/gpkg-dev-need.txt); do
              if [ -f /root/pkgs/gpkg-dev-done.txt ] && $(grep -q " $i " /root/pkgs/gpkg-dev-done.txt); then
                continue
              fi
              cd "$i"
              if [ -f /root/pkgs/gpkg-dev-continue.txt && "$(cat /root/pkgs/gpkg-dev-continue.txt)" = "$i" ]; then
                mv /root/pkgs/src .
              else
                sudo -H -u user-build bash -c "makepkg -o"
              fi
              sudo -H -u user-build bash -c '(timeout --preserve-status 300m makepkg -e --noarchive && ([ "$?" = "0" ] && makepkg -R)) || ([ "$?" = "143" ] && true)'
              if $(ls *.pkg.* &> /dev/null); then
                mv *.pkg.* /root/pkgs
                echo " ${i} " >> /root/pkgs/gpkg-dev-done.txt
                cd ..
              else
                mv src /root/pkgs
                echo "${i}" > /root/pkgs/gpkg-dev-continue.txt
                break
              fi
            done
            cd /root
            tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
            rm /builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz
            mv gpkg-dev-${{ matrix.target_arch }}.tar.xz /builder
      - uses: actions/upload-artifact@v3
        with:
          name: build-2-gpkg-dev-${{ matrix.target_arch }}
          path: "./builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz"
          if-no-files-found: error
  build-3:
    runs-on: ubuntu-latest
    needs: build-2
    strategy:
      matrix:
        target_arch: [aarch64, armv7]
    name: build
    steps:
      - uses: actions/checkout@v3
      - name: Create dir builder
        run: |
          mkdir -p ./builder
      - name: Get packages
        uses: actions/download-artifact@v3
        with:
          name: build-2-gpkg-dev-${{ matrix.target_arch }}
          path: ./builder
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: build
        with:
          arch: ${{ matrix.target_arch }}
          distro: archarm_latest
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}/builder:/builder" --volume "${PWD}/gpkg-dev:/root/gpkg-dev"
          install: |
            pacman -Syu --noconfirm
            pacman -S base-devel python git cmake python-setuptools ruby-ronn publicsuffix-list gtk-doc autoconf-archive gtest rsync ninja openssl meson --noconfirm --needed
          run: |
            useradd -m user-build
            mkdir -p /data/data/com.termux/files/usr/glibc
            ln -s /lib /data/data/com.termux/files/usr/glibc/lib
            ln -s /usr/share /data/data/com.termux/files/usr/glibc/share
            tar xJf /builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz -C /root
            cd gpkg-dev
            for i in $(cat /root/pkgs/gpkg-dev-need.txt); do
              if [ -f /root/pkgs/gpkg-dev-done.txt ] && $(grep -q " $i " /root/pkgs/gpkg-dev-done.txt); then
                continue
              fi
              cd "$i"
              if [ -f /root/pkgs/gpkg-dev-continue.txt && "$(cat /root/pkgs/gpkg-dev-continue.txt)" = "$i" ]; then
                mv /root/pkgs/src .
              else
                sudo -H -u user-build bash -c "makepkg -o"
              fi
              sudo -H -u user-build bash -c "makepkg -e"
              mv *.pkg.* /root/pkgs
              echo " ${i} " >> /root/pkgs/gpkg-dev-done.txt
              cd ..
            done
            cd /root
            tar cJf gpkg-dev-${{ matrix.target_arch }}.tar.xz pkgs
            rm /builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz
            mv gpkg-dev-${{ matrix.target_arch }}.tar.xz /builder
      - uses: actions/upload-artifact@v3
        with:
          name: gpkg-dev-${{ matrix.target_arch }}
          path: "./builder/gpkg-dev-${{ matrix.target_arch }}.tar.xz"
          if-no-files-found: error
  upload:
    if: github.event_name != 'pull_request'
    needs: build-3
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Get packages
      uses: actions/download-artifact@v3
      with:
        path: ./
    - name: Install aws-cli
      run: |
        git clone https://github.com/termux-pacman/aws-cli-action.git
        ./aws-cli-action/setup.sh '${{ secrets.AWS_ACCESS_KEY_ID }}' '${{ secrets.AWS_ACCESS_KEY }}' '${{ secrets.AWS_REGION }}'
    - name: Import GPG key
      run: |
        echo '${{ secrets.SF_GPG_BOT }}' > key.gpg
        gpg --pinentry-mode=loopback --passphrase '${{ secrets.PW_GPG_BOT }}' --import key.gpg > /dev/null
        rm key.gpg
    - name: Uploading packages to aws
      run: |
        #source ./aws-cli-action/func.sh
        for path_to_archive in gpkg-dev-*/gpkg-dev-{aarch64,armv7}.tar.xz; do
          archive="${path_to_archive##*/}"
          arch=$(echo ${archive##*-} | sed 's/.tar.xz//; s/armv7/arm/')
          tar xJf "$path_to_archive"
          for pkg in pkgs/*.pkg.*; do
            gpg --batch --pinentry-mode=loopback --passphrase '${{ secrets.PW_GPG_BOT }}' --detach-sign --use-agent -u '${{ secrets.KEY_GPG_BOT }}' --no-armor "$pkg"
            for format_file in "" ".sig"; do
              aws s3 cp "${pkg}${format_file}" s3://'${{ secrets.SFPU }}'/gpkg-dev/$arch/"${pkg##*/}${format_file}"
            done
          done
          rm -fr pkgs
        done
