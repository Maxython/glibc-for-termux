pkgname=cgt
pkgver=13.2.0
pkgrel=1
pkgdesc='Cross GCCs for Termux (only for Linux)'
arch=(x86_64)
url='https://gcc.gnu.org/'
license=(GPL LGPL FDL)
source=(https://ftp.gnu.org/gnu/gcc/gcc-$pkgver/gcc-$pkgver.tar.xz
        collect2.cc.patch
        gcc.cc.patch
        gcc-Makefile.in.patch
        gcc-configure.patch
        set_glibc_dynamic_linker.patch)
sha256sums=('e275e76442a6067341a27f04c5c6b83d8613144004c0413528863dc6b5c743da'
            '8d9f0c6cd1c57e623ba9b054f69185e4fb4717cc3af61c19d191948270042d6c'
            'dee7ec7308e934edce9dc34bb481b4a53009e9aa96d9d926df368ad949650d56'
            '1115c633d6fd0d4f6d6eeca50e4d52fd15f0bf52b4158ecb0ea6bedcb85ceb35'
            '346843fbce4bddca236ca4331ae43c5356ed177689c7760d841d2db2d2643d13'
            'cd383a4a1916f4b3102f21c640d6116f697e0ef7cde5f705d83035849c200ec6')
groups=('cgct')

prepare() {
	for i in *.patch; do
		patch -Np1 -i ${srcdir}/$i
	done

	cd gcc-${pkgver}
	sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in
	sed -i '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64
	sed -i '/lp64=/s/lib64/lib/' gcc/config/aarch64/t-aarch64-linux
}

build() {
	unset CFLAGS CXXFLAGS AR LD CC CXX
	CFLAGS="-O2 -pipe -fno-plt -fexceptions -Wp,-D_FORTIFY_SOURCE=2 -Wformat -fstack-clash-protection"
	CXXFLAGS="${CFLAGS} -Wp,-D_GLIBCXX_ASSERTIONS"

	for target in aarch64-linux-gnu arm-linux-gnueabihf x86_64-linux-gnu i686-linux-gnu; do
		arch_build=${target/-*}
		CGCT_PREFIX=${DIR_TERMUX}/cgct/${arch_build}
		mkdir gcc-${arch_build}
		cd gcc-${arch_build}

		REPO_URL="${GPKG_DEV_SERVER_URL}/gpkg-dev/${arch_build}"
		curl "${REPO_URL}/gpkg-dev.json" -o gpkg-dev.json
		for i in glibc linux-api-headers-glibc libxcrypt-glibc; do
			FILENAME=$(cat gpkg-dev.json | jq -r '."'$i'"."FILENAME"')
			curl "${REPO_URL}/$FILENAME" -o $i.tar.xz
			tar xJf $i.tar.xz -C / data
		done

		FLAGS_FOR_TARGET="-I$GLIBC_PREFIX/include -L$GLIBC_PREFIX/lib -Wl,-rpath=$GLIBC_PREFIX/lib"
		CONFIGFLAG="--with-as=${CGCT_PREFIX}/bin/as --with-ld=${CGCT_PREFIX}/bin/ld AR_FOR_TARGET=${CGCT_PREFIX}/bin/ar RANLIB_FOR_TARGET=${CGCT_PREFIX}/bin/ranlib NM_FOR_TARGET=${CGCT_PREFIX}/bin/nm"
		case "$arch_build" in
			"aarch64") CONFIGFLAG+=" --with-arch=armv8-a --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419";;
			"arm") CONFIGFLAG+=" --with-arch=armv7-a --with-float=hard --with-fpu=neon";;
			"x86_64") CONFIGFLAG+=" --with-arch=x86-64";;
			"i686") CONFIGFLAG+=" --with-arch=i686";;
		esac

		"$srcdir"/gcc-${pkgver}/configure \
			--host=${CHOST} \
			--build=${CHOST} \
			--target=${target} \
			--prefix=${CGCT_PREFIX} \
			--with-local-prefix=${CGCT_PREFIX} \
			--libdir=${CGCT_PREFIX}/lib \
			--libexecdir=${CGCT_PREFIX}/lib \
			--includedir=${GLIBC_PREFIX}/include \
			--with-bugurl=https://github.com/termux-pacman/glibc-packages/issues \
			$CONFIGFLAG \
			--enable-languages=c,c++ \
			--enable-checking=release \
			--enable-threads=posix \
			--enable-lto \
			--disable-multilib \
			--disable-bootstrap \
			--disable-nls \
			--enable-clocale=gnu \
			--enable-default-pie \
			--enable-default-ssp \
			--with-system-zlib \
			--enable-__cxa_atexit \
			--enable-linker-build-id \
			--enable-plugin \
			--with-linker-hash-style=gnu \
			--enable-gnu-indirect-function \
			--enable-gnu-unique-object \
			--enable-shared \
			--disable-werror \
			--disable-libssp \
			--disable-libstdcxx-pch \
			--disable-libunwind-exceptions \
			CFLAGS_FOR_TARGET="$FLAGS_FOR_TARGET $CFLAGS" \
			CXXFLAGS_FOR_TARGET="$FLAGS_FOR_TARGET $CXXFLAGS"
		make

		cd ..
		rm -fr ${DIR_TERMUX}/files
	done
}

package() {
	for target in aarch64-linux-gnu arm-linux-gnueabihf x86_64-linux-gnu i686-linux-gnu; do
		arch_build=${target/-*}
		CGCT_PREFIX=${DIR_TERMUX}/cgct/${arch_build}
		cd gcc-${arch_build}

		for i in glibc linux-api-headers-glibc libxcrypt-glibc; do
			tar xJf $i.tar.xz -C / data
		done

		make DESTDIR="$pkgdir" install-gcc install-target-{libgcc,libstdc++-v3,libgomp,libquadmath,libatomic}

		if [ -d $pkgdir/${CGCT_PREFIX}/$target/lib ]; then
			mv $pkgdir/${CGCT_PREFIX}/$target/lib/* $pkgdir/${CGCT_PREFIX}/lib
		fi
		if [ -d $pkgdir/${CGCT_PREFIX}/$target/include ]; then
			mv $pkgdir/${CGCT_PREFIX}/$target/include/* $pkgdir/${CGCT_PREFIX}/include
		fi
		if [ -d $pkgdir/${CGCT_PREFIX}/include/$pkgver ]; then
			mkdir $pkgdir/${CGCT_PREFIX}/include/c++
			mv $pkgdir/${CGCT_PREFIX}/include/$pkgver $pkgdir/${CGCT_PREFIX}/include/c++
		fi
		rm -fr $pkgdir/${CGCT_PREFIX}/share
		rm -fr $pkgdir/${CGCT_PREFIX}/$target
		rm -fr $pkgdir/${DIR_TERMUX}/files

		cd ..
		rm -fr ${DIR_TERMUX}/files
	done

	replace_hard_with_symbolic "$pkgdir"
}
